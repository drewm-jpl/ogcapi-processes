openapi: 3.0.0
info:
  contact:
    email: info@ogc.org
    name: Open Geospatial Consortium
  description: Example API Definition for OGC API - Processes
  license:
    name: OGC License
    url: http://www.opengeospatial.org/legal/
  title: OGC API - Processes
  version: "0.1"
servers:
- description: "Example Server 1 (GNOSIS, supporting Part 1: Core /Sync and Part 3:\
    \ Workflows)"
  url: https://maps.gnosis.earth/ogcapi
paths:
  /:
    get:
      operationId: getLandingPage
      parameters:
      - description: "The format of the response. If no value is provided, the accept\
          \ header is used to determine the format. Accepted values are 'json' or\
          \ 'html'."
        explode: false
        in: query
        name: f
        required: false
        schema:
          enum:
          - json
          - html
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/landingPage'
            text/html:
              schema:
                type: string
          description: |-
            The landing page provides links to the API definition (link relation `service-desc`, in this case path `/api`),
            to the Conformance declaration (path `/conformance`, link relation `http://www.opengis.net/def/rel/ogc/1.0/conformance`), and to other resources.
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "Content negotiation failed. For example, the `Accept` header\
            \ submitted in the request did not support any of the media types supported\
            \ by the server for the requested resource."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: Retrieve the OGC API landing page for this service.
      tags:
      - Landing Page
  /conformance:
    get:
      operationId: getConformance
      parameters:
      - description: "The format of the response. If no value is provided, the accept\
          \ header is used to determine the format. Accepted values are 'json' or\
          \ 'html'."
        explode: false
        in: query
        name: f
        required: false
        schema:
          enum:
          - json
          - html
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/confClasses'
                example:
                  conformsTo:
                  - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core
                  - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json
                  - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html
                  - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30
                  - http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections
                  - http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/nested-processes
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/remote-core-processes
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/collection-input
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/remote-collections
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/input-fields-modifiers
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/output-fields-modifiers
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/deployable-workflows
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/collection-output
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/cwl-workflows
                  - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/openeo-workflows
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tilesets-list
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-tilesets
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/dataset-tilesets
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-selection
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/jpeg
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/png
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/mvt
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geojson
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tiff
                  - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/netcdf
          description: |-
            The URIs of all conformance classes supported by the server

            To support "generic" clients that want to access multiple
            OGC API - Processes implementations - and not "just" a specific
            API / server, the server declares the conformance
            classes it implements and conforms to.
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "Content negotiation failed. For example, the `Accept` header\
            \ submitted in the request did not support any of the media types supported\
            \ by the server for the requested resource."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: Retrieve the set of OGC API conformance classes that are supported
        by this service.
      tags:
      - Conformance
  /api:
    get:
      operationId: getAPI
      parameters:
      - description: "The format of the response. If no value is provided, the accept\
          \ header is used to determine the format. Accepted values are 'json' or\
          \ 'html'."
        explode: false
        in: query
        name: f
        required: false
        schema:
          enum:
          - json
          - html
          type: string
        style: form
      responses:
        "200":
          content:
            application/vnd.oai.openapi+json;version=3.0:
              schema:
                type: object
            text/html:
              schema:
                type: string
          description: The OpenAPI definition of the API.
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "Content negotiation failed. For example, the `Accept` header\
            \ submitted in the request did not support any of the media types supported\
            \ by the server for the requested resource."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: Retrieve this API definition.
      tags:
      - API
  /api/processes-list:
    get:
      operationId: getAPIProcesses
      parameters:
      - description: "The format of the response. If no value is provided, the accept\
          \ header is used to determine the format. Accepted values are 'json' or\
          \ 'html'."
        explode: false
        in: query
        name: f
        required: false
        schema:
          enum:
          - json
          - html
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enumeration'
            text/html:
              schema:
                type: string
          description: An enumerated list of valid string values for API parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "The requested resource does not exist on the server. For example,\
            \ a path parameter had an incorrect value."
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "Content negotiation failed. For example, the `Accept` header\
            \ submitted in the request did not support any of the media types supported\
            \ by the server for the requested resource."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: Retrieve the list of processes available from this API implementation
        & deployment.
      tags:
      - API
  /processes:
    get:
      description: |
        The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.

        For more information, see [Section 7.7]https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_process_list).
      operationId: getProcesses
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/processList'
          description: Information about the available processes
      summary: retrieve the list of available processes
      tags:
      - Processes
  /processes/{processId}:
    get:
      description: |
        The process description contains information about inputs and outputs and a link to the execution-endpoint for the process. The Core does not mandate the use of a specific process description to specify the interface of a process. That said, the Core requirements class makes the following recommendation:

        Implementations SHOULD consider supporting the OGC process description.

        For more information, see [Section 7.8](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_process_description).
      operationId: getProcessDescription
      parameters:
      - in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/processes-list'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/process'
          description: A process description.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "The requested resource does not exist on the server. For example,\
            \ a path parameter had an incorrect value."
      summary: retrieve a process description
      tags:
      - Processes
  /processes/{processId}/execution:
    post:
      callbacks:
        jobCompleted:
          '{$request.body#/subscriber/successUri}':
            post:
              operationId: jobCompleted_Post
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/results_1'
              responses:
                "200":
                  description: Results received successfully
              x-callback-request: true
      description: |
        Executes a process (this may result in the creation of a job resource e.g., for _asynchronous execution_).

        For more information, see [Section 7.9](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_create_job).
      operationId: execute
      parameters:
      - in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/processes-list'
      - description: |-
          Indicates client preferences, including whether the client is capable of asynchronous processing.
          A `respond-async` preference indicates a preference for asynchronous processing.
          A `wait: <x>s` preference indicates that the client prefers to wait up to x seconds to receive a reponse synchronously before the server falls back to asynchronous processing.
        in: header
        name: Prefer
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/execute'
        description: |-
          An execution request specifying any inputs for the process to execute, and optionally to select specific outputs.
          With support for _Part 3: Workflows and chaining_, this execution request may specify a complex processing workflow
          e.g., including nested processes and OGC API collections as inputs.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/execute_200_response'
            image/png:
              schema:
                format: binary
                type: string
            image/jpeg:
              schema:
                format: binary
                type: string
            image/tiff; application=geotiff:
              schema:
                format: binary
                type: string
            application/geo+json:
              schema:
                $ref: '#/components/schemas/execute_200_response_1'
          description: Result of synchronous execution
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statusInfo'
          description: Started asynchronous execution. Created job.
          headers:
            Location:
              description: URL to check the status of the execution/job.
              schema:
                type: string
            Preference-Applied:
              description: The preference applied to execute the process asynchronously
                (see. RFC 2740).
              schema:
                type: string
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "The requested resource does not exist on the server. For example,\
            \ a path parameter had an incorrect value."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: execute a process.
      tags:
      - Processes
  /jobs:
    get:
      description: |
        Lists available jobs.

        For more information, see [Section 12](https://docs.ogc.org/is/18-062r2/18-062r2.html#Job_list).
      operationId: getJobs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobList'
          description: A list of jobs for this process.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "The requested resource does not exist on the server. For example,\
            \ a path parameter had an incorrect value."
      summary: retrieve the list of jobs.
      tags:
      - Jobs
  /jobs/{jobId}:
    delete:
      description: |
        Cancel a job execution and remove it from the jobs list.

        For more information, see [Section 14]https://docs.ogc.org/is/18-062r2/18-062r2.html#Dismiss).
      operationId: dismiss
      parameters:
      - description: local identifier of a job
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statusInfo'
          description: The status of a job.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "The requested resource does not exist on the server. For example,\
            \ a path parameter had an incorrect value."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: "cancel a job execution, remove a finished job"
      tags:
      - Jobs
    get:
      description: |
        Shows the status of a job.

         For more information, see [Section 7.10](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_retrieve_status_info).
      operationId: getStatus
      parameters:
      - description: local identifier of a job
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statusInfo'
          description: The status of a job.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "The requested resource does not exist on the server. For example,\
            \ a path parameter had an incorrect value."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: retrieve the status of a job
      tags:
      - Jobs
  /jobs/{jobId}/results:
    get:
      description: |
        Lists available results of a job. In case of a failure, lists exceptions instead.

        For more information, see [Section 7.11](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_retrieve_job_results).
      operationId: getResult
      parameters:
      - description: local identifier of a job
        in: path
        name: jobId
        required: true
        schema:
          type: string
      - description: |-
          Indicates client preferences, such as whether the client wishes a self-contained or minimal response.
          A `return=minimal` preference indicates that the client would prefer that links be returned to larger object to minimize the response payload.
          A `return=representation` indicates that the client would prefer if the server can return a self-contained response.
        in: header
        name: Prefer
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/results'
          description: The processing results of a job.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: "The requested resource does not exist on the server. For example,\
            \ a path parameter had an incorrect value."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: retrieve the result(s) of a job
      tags:
      - Jobs
components:
  parameters:
    processId-path:
      in: path
      name: processId
      required: true
      schema:
        $ref: '#/components/schemas/processes-list'
    outputId:
      description: identifier of an output
      in: path
      name: outputID
      required: true
      schema:
        type: string
    jobId:
      description: local identifier of a job
      in: path
      name: jobId
      required: true
      schema:
        type: string
    processId-query:
      in: query
      name: processID
      required: false
      schema:
        items:
          type: string
        type: array
    output:
      explode: false
      in: query
      name: output
      required: false
      schema:
        properties:
          output:
            type: string
          mediaType:
            type: string
          encoding:
            type: string
          schema:
            oneOf:
            - format: url
              type: string
            - type: object
        required:
        - output
        type: object
    limit:
      in: query
      name: limit
      required: false
      schema:
        default: 10
        maximum: 1000
        minimum: 1
        type: integer
    type:
      in: query
      name: type
      required: false
      schema:
        items:
          enum:
          - process
          type: string
        type: array
    status:
      in: query
      name: status
      required: false
      schema:
        items:
          $ref: ./schemas/processes-core/statusCode.yaml
        type: array
    minDuration:
      in: query
      name: minDuration
      required: false
      schema:
        type: integer
    maxDuration:
      in: query
      name: maxDuration
      required: false
      schema:
        type: integer
    f-metadata:
      description: "The format of the response. If no value is provided, the accept\
        \ header is used to determine the format. Accepted values are 'json' or 'html'."
      explode: false
      in: query
      name: f
      required: false
      schema:
        enum:
        - json
        - html
        type: string
      style: form
    prefer-header-execution:
      description: |-
        Indicates client preferences, including whether the client is capable of asynchronous processing.
        A `respond-async` preference indicates a preference for asynchronous processing.
        A `wait: <x>s` preference indicates that the client prefers to wait up to x seconds to receive a reponse synchronously before the server falls back to asynchronous processing.
      in: header
      name: Prefer
      schema:
        type: string
    prefer-header-results:
      description: |-
        Indicates client preferences, such as whether the client wishes a self-contained or minimal response.
        A `return=minimal` preference indicates that the client would prefer that links be returned to larger object to minimize the response payload.
        A `return=representation` indicates that the client would prefer if the server can return a self-contained response.
      in: header
      name: Prefer
      schema:
        type: string
  responses:
    NotFound:
      $ref: '#/components/responses/rNotFound'
    NotAcceptable:
      $ref: '#/components/responses/rNotAcceptable'
    ServerError:
      $ref: '#/components/responses/rServerError'
    InvalidParameter:
      $ref: '#/components/responses/rInvalidParameter'
    NotAllowed:
      $ref: '#/components/responses/rNotAllowed'
    Exception:
      $ref: '#/components/responses/rException'
    Enumeration:
      $ref: '#/components/responses/rEnumeration'
    ProcessList:
      $ref: '#/components/responses/rProcessList'
    ProcessDescription:
      $ref: '#/components/responses/rProcessDescription'
    Results:
      $ref: '#/components/responses/rResults'
    Status:
      $ref: '#/components/responses/rStatus'
    JobList:
      $ref: '#/components/responses/rJobList'
    ExecuteAsync:
      $ref: '#/components/responses/rExecuteAsync'
    ExecuteSync:
      $ref: '#/components/responses/rExecuteSync'
    ExecuteSyncRawRef:
      $ref: '#/components/responses/rExecuteSyncRawRef'
    rLandingPage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/landingPage'
        text/html:
          schema:
            type: string
      description: |-
        The landing page provides links to the API definition (link relation `service-desc`, in this case path `/api`),
        to the Conformance declaration (path `/conformance`, link relation `http://www.opengis.net/def/rel/ogc/1.0/conformance`), and to other resources.
    rNotAcceptable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: "Content negotiation failed. For example, the `Accept` header submitted\
        \ in the request did not support any of the media types supported by the server\
        \ for the requested resource."
    rServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: A server error occurred.
    rConformance:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/confClasses'
            example:
              conformsTo:
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30
              - http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections
              - http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/nested-processes
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/remote-core-processes
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/collection-input
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/remote-collections
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/input-fields-modifiers
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/output-fields-modifiers
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/deployable-workflows
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/collection-output
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/cwl-workflows
              - http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/openeo-workflows
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tilesets-list
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-tilesets
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/dataset-tilesets
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-selection
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/jpeg
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/png
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/mvt
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geojson
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tiff
              - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/netcdf
      description: |-
        The URIs of all conformance classes supported by the server

        To support "generic" clients that want to access multiple
        OGC API - Processes implementations - and not "just" a specific
        API / server, the server declares the conformance
        classes it implements and conforms to.
    rAPI:
      content:
        application/vnd.oai.openapi+json;version=3.0:
          schema:
            type: object
        text/html:
          schema:
            type: string
      description: The OpenAPI definition of the API.
    rEnumeration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/enumeration'
        text/html:
          schema:
            type: string
      description: An enumerated list of valid string values for API parameters.
    rNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: "The requested resource does not exist on the server. For example,\
        \ a path parameter had an incorrect value."
    rProcessList:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/processList'
      description: Information about the available processes
    rProcessDescription:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/process'
      description: A process description.
    rExecuteSync:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/execute_200_response'
        image/png:
          schema:
            format: binary
            type: string
        image/jpeg:
          schema:
            format: binary
            type: string
        image/tiff; application=geotiff:
          schema:
            format: binary
            type: string
        application/geo+json:
          schema:
            $ref: '#/components/schemas/execute_200_response_1'
      description: Result of synchronous execution
    rExecuteAsync:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/statusInfo'
      description: Started asynchronous execution. Created job.
      headers:
        Location:
          description: URL to check the status of the execution/job.
          schema:
            type: string
        Preference-Applied:
          description: The preference applied to execute the process asynchronously
            (see. RFC 2740).
          schema:
            type: string
    rJobList:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/jobList'
      description: A list of jobs for this process.
    rStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/statusInfo'
      description: The status of a job.
    rResults:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/results'
      description: The processing results of a job.
    rInvalidParameter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: A query parameter has an invalid value.
    rNotAllowed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: The method is not allowed at the path.
    rException:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: An error occured.
    rExecuteSyncRawRef:
      description: Synchronous execution response.
      headers:
        Link:
          description: One or more Link headers pointing to each raw output.
          schema:
            type: string
  schemas:
    processSummary:
      allOf:
      - $ref: '#/components/schemas/descriptionType'
      - properties:
          id:
            type: string
          version:
            type: string
          jobControlOptions:
            items:
              $ref: '#/components/schemas/jobControlOptions'
            type: array
          links:
            items:
              $ref: '#/components/schemas/link'
            type: array
        required:
        - id
        - version
        type: object
      example:
        metadata:
        - hreflang: en
          role: role
          rel: service
          href: href
          type: application/json
          title: title
        - hreflang: en
          role: role
          rel: service
          href: href
          type: application/json
          title: title
        keywords:
        - keywords
        - keywords
        description: description
        links:
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        id: id
        title: title
        version: version
        jobControlOptions:
        - null
        - null
      title: processSummary
    process:
      allOf:
      - $ref: '#/components/schemas/processSummary'
      - properties:
          inputs:
            additionalProperties:
              $ref: '#/components/schemas/inputDescription'
            type: object
          outputs:
            additionalProperties:
              $ref: '#/components/schemas/outputDescription'
            type: object
        type: object
      example:
        outputs:
          key:
            schema: null
            metadata:
            - null
            - null
            keywords:
            - keywords
            - keywords
            description: description
            title: title
        inputs:
          key:
            schema:
              $ref: $ref
            metadata:
            - hreflang: en
              role: role
              rel: service
              href: href
              type: application/json
              title: title
            - hreflang: en
              role: role
              rel: service
              href: href
              type: application/json
              title: title
            keywords:
            - keywords
            - keywords
            minOccurs: 0
            valuePassing:
            - byValue
            - byValue
            description: description
            maxOccurs: 6
            title: title
      title: process
    processList:
      example:
        processes:
        - metadata:
          - hreflang: en
            role: role
            rel: service
            href: href
            type: application/json
            title: title
          - hreflang: en
            role: role
            rel: service
            href: href
            type: application/json
            title: title
          keywords:
          - keywords
          - keywords
          description: description
          links:
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          id: id
          title: title
          version: version
          jobControlOptions:
          - null
          - null
        - metadata:
          - hreflang: en
            role: role
            rel: service
            href: href
            type: application/json
            title: title
          - hreflang: en
            role: role
            rel: service
            href: href
            type: application/json
            title: title
          keywords:
          - keywords
          - keywords
          description: description
          links:
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          id: id
          title: title
          version: version
          jobControlOptions:
          - null
          - null
        links:
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
      properties:
        processes:
          items:
            $ref: '#/components/schemas/processSummary'
          title: processes
          type: array
        links:
          items:
            $ref: '#/components/schemas/link'
          title: links
          type: array
      required:
      - links
      - processes
      title: processList
      type: object
    jobList:
      example:
        jobs:
        - exception:
            instance: instance
            detail: detail
            type: type
            title: title
            status: 0
          jobID: jobID
          processID: processID
          created: 2000-01-23T04:56:07.000+00:00
          progress: 8
          started: 2000-01-23T04:56:07.000+00:00
          finished: 2000-01-23T04:56:07.000+00:00
          links:
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          type: process
          message: message
          updated: 2000-01-23T04:56:07.000+00:00
          status: null
        - exception:
            instance: instance
            detail: detail
            type: type
            title: title
            status: 0
          jobID: jobID
          processID: processID
          created: 2000-01-23T04:56:07.000+00:00
          progress: 8
          started: 2000-01-23T04:56:07.000+00:00
          finished: 2000-01-23T04:56:07.000+00:00
          links:
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          - hreflang: en
            rel: service
            href: href
            type: application/json
            title: title
          type: process
          message: message
          updated: 2000-01-23T04:56:07.000+00:00
          status: null
        links:
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
      properties:
        jobs:
          items:
            $ref: '#/components/schemas/statusInfo'
          title: jobs
          type: array
        links:
          items:
            $ref: '#/components/schemas/link'
          title: links
          type: array
      required:
      - jobs
      - links
      title: jobList
      type: object
    bbox-processes:
      properties:
        bbox:
          items:
            type: number
          oneOf:
          - maxItems: 4
            minItems: 4
            type: object
          - maxItems: 6
            minItems: 6
            type: object
          title: bbox
          type: array
        crs:
          $ref: '#/components/schemas/bbox_processes_crs'
      required:
      - bbox
      title: bbox
      type: object
    descriptionType:
      properties:
        title:
          title: title
          type: string
        description:
          title: description
          type: string
        keywords:
          items:
            type: string
          title: keywords
          type: array
        metadata:
          items:
            $ref: '#/components/schemas/metadata'
          title: metadata
          type: array
      title: descriptionType
      type: object
    binaryInputValue:
      format: byte
      type: string
    execute:
      properties:
        inputs:
          additionalProperties:
            $ref: '#/components/schemas/input'
          title: inputs
          type: object
        outputs:
          additionalProperties:
            $ref: '#/components/schemas/output'
          title: outputs
          type: object
        subscriber:
          $ref: '#/components/schemas/subscriber'
      title: execute
      type: object
    format:
      properties:
        mediaType:
          title: mediaType
          type: string
        encoding:
          title: encoding
          type: string
        schema:
          $ref: '#/components/schemas/format_schema'
      title: format
      type: object
    inputDescription:
      allOf:
      - $ref: '#/components/schemas/descriptionType'
      - properties:
          valuePassing:
            default:
            - byValue
            - byReference
            items:
              enum:
              - byValue
              - byReference
              type: string
            type: array
          minOccurs:
            default: 1
            type: integer
          maxOccurs:
            $ref: '#/components/schemas/inputDescription_allOf_maxOccurs'
          schema:
            $ref: '#/components/schemas/schema'
        required:
        - schema
        type: object
      example:
        schema:
          $ref: $ref
        metadata:
        - hreflang: en
          role: role
          rel: service
          href: href
          type: application/json
          title: title
        - hreflang: en
          role: role
          rel: service
          href: href
          type: application/json
          title: title
        keywords:
        - keywords
        - keywords
        minOccurs: 0
        valuePassing:
        - byValue
        - byValue
        description: description
        maxOccurs: 6
        title: title
      title: inputDescription
    inputValue:
      oneOf:
      - $ref: '#/components/schemas/inputValueNoObject'
      - type: object
      title: inputValue
    inputValueNoObject:
      oneOf:
      - type: string
      - type: number
      - type: integer
      - type: boolean
      - items:
          type: object
        type: array
      - $ref: '#/components/schemas/binaryInputValue'
      - $ref: '#/components/schemas/bbox'
      title: inputValueNoObject
    jobControlOptions:
      enum:
      - sync-execute
      - async-execute
      - dismiss
      title: jobControlOptions
      type: string
    metadata:
      oneOf:
      - $ref: '#/components/schemas/metadata_oneOf'
      - $ref: '#/components/schemas/metadata_oneOf_1'
      title: metadata
    output:
      properties:
        format:
          $ref: '#/components/schemas/format'
      title: output
      type: object
    outputDescription:
      allOf:
      - $ref: '#/components/schemas/descriptionType'
      - properties:
          schema:
            $ref: '#/components/schemas/schema'
        required:
        - schema
        type: object
      example:
        schema: null
        metadata:
        - null
        - null
        keywords:
        - keywords
        - keywords
        description: description
        title: title
      title: outputDescription
    qualifiedInputValue:
      allOf:
      - $ref: '#/components/schemas/format'
      - properties:
          value:
            $ref: '#/components/schemas/inputValue'
        required:
        - value
        type: object
      title: qualifiedInputValue
    reference:
      additionalProperties: false
      example:
        $ref: $ref
      properties:
        $ref:
          format: uri-reference
          title: $ref
          type: string
      required:
      - $ref
      title: reference
      type: object
    results:
      additionalProperties:
        $ref: '#/components/schemas/inlineOrRefData'
      type: object
    schema:
      oneOf:
      - $ref: '#/components/schemas/reference'
      - $ref: '#/components/schemas/schema_oneOf'
      title: schema
    statusCode:
      enum:
      - accepted
      - running
      - successful
      - failed
      - dismissed
      nullable: false
      title: statusCode
      type: string
    subscriber:
      description: |-
        Optional URIs for callbacks for this job.

        Support for this parameter is not required and the parameter may be
        removed from the API definition, if conformance class **'callback'**
        is not listed in the conformance declaration under `/conformance`.
      properties:
        successUri:
          format: uri
          title: successUri
          type: string
        inProgressUri:
          format: uri
          title: inProgressUri
          type: string
        failedUri:
          format: uri
          title: failedUri
          type: string
      required:
      - successUri
      title: subscriber
      type: object
    inlineOrRefData:
      oneOf:
      - $ref: '#/components/schemas/inputValueNoObject'
      - $ref: '#/components/schemas/qualifiedInputValue'
      - $ref: '#/components/schemas/link'
      title: inlineOrRefData
    statusInfo:
      example:
        exception:
          instance: instance
          detail: detail
          type: type
          title: title
          status: 0
        jobID: jobID
        processID: processID
        created: 2000-01-23T04:56:07.000+00:00
        progress: 8
        started: 2000-01-23T04:56:07.000+00:00
        finished: 2000-01-23T04:56:07.000+00:00
        links:
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        type: process
        message: message
        updated: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        processID:
          title: processID
          type: string
        type:
          enum:
          - process
          title: type
          type: string
        jobID:
          title: jobID
          type: string
        status:
          $ref: '#/components/schemas/statusCode'
        message:
          title: message
          type: string
        exception:
          $ref: '#/components/schemas/exception'
        created:
          format: date-time
          title: created
          type: string
        started:
          format: date-time
          title: started
          type: string
        finished:
          format: date-time
          title: finished
          type: string
        updated:
          format: date-time
          title: updated
          type: string
        progress:
          maximum: 100
          minimum: 0
          title: progress
          type: integer
        links:
          items:
            $ref: '#/components/schemas/link'
          title: links
          type: array
      required:
      - jobID
      - status
      - type
      title: statusInfo
      type: object
    landingPage:
      example:
        attribution: attribution
        description: Example server implementing the OGC API - Processes 1.0 Standard
        links:
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        - hreflang: en
          rel: service
          href: href
          type: application/json
          title: title
        title: Example processing server
      properties:
        title:
          example: Example processing server
          title: title
          type: string
        description:
          example: Example server implementing the OGC API - Processes 1.0 Standard
          title: description
          type: string
        attribution:
          description: "The `attribution` should be short and intended for presentation\
            \ to a user, for example, in a corner of a map. Parts of the text can\
            \ be links to other resources if additional information is needed. The\
            \ string can include HTML markup."
          title: attribution for the Processes API
          type: string
        links:
          items:
            $ref: '#/components/schemas/link'
          title: links
          type: array
      required:
      - links
      title: landingPage
      type: object
    exception:
      additionalProperties: true
      description: JSON schema for exceptions based on RFC 7807
      example:
        instance: instance
        detail: detail
        type: type
        title: title
        status: 0
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
      required:
      - type
      title: Exception Schema
      type: object
    confClasses:
      properties:
        conformsTo:
          items:
            example: http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core
            type: string
          title: conformsTo
          type: array
      required:
      - conformsTo
      title: confClasses
      type: object
    enumeration:
      example:
        type: enum
        enum:
        - enum
        - enum
      properties:
        type:
          enum:
          - enum
          title: type
          type: string
        enum:
          items:
            type: string
          title: enum
          type: array
      required:
      - enum
      - type
      title: enumeration
      type: object
    processes-list:
      enum:
      - RenderMap
      - ElevationContours
      - OSMERE
      title: processes-list
      type: string
    FeatureCollection:
      properties:
        type:
          enum:
          - FeatureCollection
          title: type
          type: string
        features:
          items:
            $ref: '#/components/schemas/GeoJSON_Feature'
          title: features
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - features
      - type
      title: GeoJSON FeatureCollection
      type: object
    results_1:
      additionalProperties:
        $ref: '#/components/schemas/inlineOrRefData'
      type: object
    link:
      example:
        hreflang: en
        rel: service
        href: href
        type: application/json
        title: title
      properties:
        href:
          title: href
          type: string
        rel:
          example: service
          title: rel
          type: string
        type:
          example: application/json
          title: type
          type: string
        hreflang:
          example: en
          title: hreflang
          type: string
        title:
          title: title
          type: string
      required:
      - href
      title: link
      type: object
    bbox:
      properties:
        bbox:
          items:
            type: number
          oneOf:
          - maxItems: 4
            minItems: 4
            type: object
          - maxItems: 6
            minItems: 6
            type: object
          title: bbox
          type: array
        crs:
          $ref: '#/components/schemas/bbox_processes_crs'
      required:
      - bbox
      title: bbox
      type: object
    input:
      oneOf:
      - $ref: '#/components/schemas/inlineOrRefData_1'
      - items:
          $ref: '#/components/schemas/inlineOrRefData_1'
        type: array
      title: input
    schema_1:
      oneOf:
      - $ref: '#/components/schemas/reference'
      - $ref: '#/components/schemas/schema_oneOf'
      title: schema_1
    inlineOrRefData_1:
      oneOf:
      - $ref: '#/components/schemas/inputValueNoObject_1'
      - $ref: '#/components/schemas/qualifiedInputValue_1'
      - $ref: '#/components/schemas/link'
      title: inlineOrRefData_1
    inputValueNoObject_1:
      oneOf:
      - type: string
      - type: number
      - type: integer
      - type: boolean
      - items:
          type: object
        type: array
      - $ref: '#/components/schemas/binaryInputValue'
      - $ref: '#/components/schemas/bbox'
      title: inputValueNoObject_1
    qualifiedInputValue_1:
      allOf:
      - $ref: '#/components/schemas/format'
      - properties:
          value:
            $ref: '#/components/schemas/inputValue_1'
        required:
        - value
        type: object
      title: qualifiedInputValue_1
    inputValue_1:
      oneOf:
      - $ref: '#/components/schemas/inputValueNoObject_1'
      - type: object
      title: inputValue_1
    execute_200_response:
      oneOf:
      - type: string
      - type: number
      - type: integer
      - nullable: true
        type: object
      - items:
          type: object
        type: array
      - type: boolean
      - format: binary
        type: string
      - $ref: '#/components/schemas/results'
      title: execute_200_response
    execute_200_response_1:
      allOf:
      - format: geojson-feature-collection
        type: object
      - $ref: '#/components/schemas/FeatureCollection'
      title: execute_200_response_1
    bbox_processes_bbox:
      items:
        type: number
      oneOf:
      - maxItems: 4
        minItems: 4
        type: object
      - maxItems: 6
        minItems: 6
        type: object
      title: bbox
      type: array
    bbox_processes_crs:
      anyOf:
      - enum:
        - http://www.opengis.net/def/crs/OGC/1.3/CRS84
        - http://www.opengis.net/def/crs/OGC/0/CRS84h
        format: uri
        type: string
      - format: uri
        type: string
      default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
      title: bbox_processes_crs
    format_schema:
      oneOf:
      - format: url
        type: string
      - type: object
      title: format_schema
    inputDescription_allOf_maxOccurs:
      oneOf:
      - default: 1
        type: integer
      - enum:
        - unbounded
        type: string
      title: inputDescription_allOf_maxOccurs
    metadata_oneOf:
      allOf:
      - $ref: '#/components/schemas/link'
      - properties:
          role:
            type: string
        type: object
      example:
        hreflang: en
        role: role
        rel: service
        href: href
        type: application/json
        title: title
      title: metadata_oneOf
    metadata_oneOf_1_value:
      oneOf:
      - type: string
      - type: object
      title: metadata_oneOf_1_value
    metadata_oneOf_1:
      properties:
        role:
          title: role
          type: string
        title:
          title: title
          type: string
        lang:
          title: lang
          type: string
        value:
          $ref: '#/components/schemas/metadata_oneOf_1_value'
      title: metadata_oneOf_1
      type: object
    schema_oneOf_additionalProperties:
      default: true
      oneOf:
      - $ref: '#/components/schemas/schema_1'
      - type: boolean
      title: schema_oneOf_additionalProperties
    schema_oneOf:
      additionalProperties: false
      properties:
        title:
          title: title
          type: string
        multipleOf:
          exclusiveMinimum: true
          minimum: 0
          title: multipleOf
          type: number
        maximum:
          title: maximum
          type: number
        exclusiveMaximum:
          default: false
          title: exclusiveMaximum
          type: boolean
        minimum:
          title: minimum
          type: number
        exclusiveMinimum:
          default: false
          title: exclusiveMinimum
          type: boolean
        maxLength:
          minimum: 0
          title: maxLength
          type: integer
        minLength:
          default: 0
          minimum: 0
          title: minLength
          type: integer
        pattern:
          format: regex
          title: pattern
          type: string
        maxItems:
          minimum: 0
          title: maxItems
          type: integer
        minItems:
          default: 0
          minimum: 0
          title: minItems
          type: integer
        uniqueItems:
          default: false
          title: uniqueItems
          type: boolean
        maxProperties:
          minimum: 0
          title: maxProperties
          type: integer
        minProperties:
          default: 0
          minimum: 0
          title: minProperties
          type: integer
        required:
          items:
            type: string
          minItems: 1
          title: required
          type: array
          uniqueItems: true
        enum:
          items:
            type: object
          minItems: 1
          title: enum
          type: array
          uniqueItems: false
        type:
          enum:
          - array
          - boolean
          - integer
          - number
          - object
          - string
          title: type
          type: string
        not:
          $ref: '#/components/schemas/schema_1'
        allOf:
          items:
            $ref: '#/components/schemas/schema_1'
          title: allOf
          type: array
        oneOf:
          items:
            $ref: '#/components/schemas/schema_1'
          title: oneOf
          type: array
        anyOf:
          items:
            $ref: '#/components/schemas/schema_1'
          title: anyOf
          type: array
        items:
          $ref: '#/components/schemas/schema_1'
        properties:
          additionalProperties:
            $ref: '#/components/schemas/schema_1'
          properties: {}
          title: properties
          type: object
        additionalProperties:
          $ref: '#/components/schemas/schema_oneOf_additionalProperties'
        description:
          title: description
          type: string
        format:
          title: format
          type: string
        default:
          title: default
          type: object
        nullable:
          default: false
          title: nullable
          type: boolean
        readOnly:
          default: false
          title: readOnly
          type: boolean
        writeOnly:
          default: false
          title: writeOnly
          type: boolean
        example:
          title: example
          type: object
        deprecated:
          default: false
          title: deprecated
          type: boolean
        contentMediaType:
          title: contentMediaType
          type: string
        contentEncoding:
          title: contentEncoding
          type: string
        contentSchema:
          title: contentSchema
          type: string
      title: schema_oneOf
      type: object
    GeoJSON_Feature_id:
      oneOf:
      - type: number
      - type: string
      title: GeoJSON_Feature_id
    GeoJSON_Point:
      nullable: true
      properties:
        type:
          enum:
          - Point
          title: type
          type: string
        coordinates:
          items:
            type: number
          minItems: 2
          title: coordinates
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - coordinates
      - type
      title: GeoJSON Point
      type: object
    GeoJSON_LineString:
      properties:
        type:
          enum:
          - LineString
          title: type
          type: string
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          minItems: 2
          title: coordinates
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - coordinates
      - type
      title: GeoJSON LineString
      type: object
    GeoJSON_Polygon:
      properties:
        type:
          enum:
          - Polygon
          title: type
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 4
            type: array
          title: coordinates
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - coordinates
      - type
      title: GeoJSON Polygon
      type: object
    GeoJSON_MultiPoint:
      properties:
        type:
          enum:
          - MultiPoint
          title: type
          type: string
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          title: coordinates
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - coordinates
      - type
      title: GeoJSON MultiPoint
      type: object
    GeoJSON_MultiLineString:
      properties:
        type:
          enum:
          - MultiLineString
          title: type
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 2
            type: array
          title: coordinates
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - coordinates
      - type
      title: GeoJSON MultiLineString
      type: object
    GeoJSON_MultiPolygon:
      properties:
        type:
          enum:
          - MultiPolygon
          title: type
          type: string
        coordinates:
          items:
            items:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              minItems: 4
              type: array
            type: array
          title: coordinates
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - coordinates
      - type
      title: GeoJSON MultiPolygon
      type: object
    GeoJSON_Feature_geometry:
      oneOf:
      - $ref: '#/components/schemas/GeoJSON_Point'
      - $ref: '#/components/schemas/GeoJSON_LineString'
      - $ref: '#/components/schemas/GeoJSON_Polygon'
      - $ref: '#/components/schemas/GeoJSON_MultiPoint'
      - $ref: '#/components/schemas/GeoJSON_MultiLineString'
      - $ref: '#/components/schemas/GeoJSON_MultiPolygon'
      title: GeoJSON_Feature_geometry
    GeoJSON_Feature:
      properties:
        type:
          enum:
          - Feature
          title: type
          type: string
        id:
          $ref: '#/components/schemas/GeoJSON_Feature_id'
        properties:
          nullable: true
          title: properties
          type: object
        geometry:
          $ref: '#/components/schemas/GeoJSON_Feature_geometry'
        bbox:
          items:
            type: number
          minItems: 4
          title: bbox
          type: array
      required:
      - geometry
      - properties
      - type
      title: GeoJSON Feature
      type: object
